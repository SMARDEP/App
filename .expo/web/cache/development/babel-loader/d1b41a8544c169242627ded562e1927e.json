{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport config from \"../config\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nfunction authAPI(method, path, data, callback, errorCallback) {\n  var token, link, sendParam;\n  return _regeneratorRuntime.async(function authAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('token', ''));\n\n        case 2:\n          token = _context.sent;\n          link = config.domain + '/' + path + '?api_token=' + token;\n          console.log(link);\n          sendParam = {\n            method: method,\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            }\n          };\n\n          if (method == \"POST\") {\n            sendParam.body = JSON.stringify(data);\n          }\n\n          fetch(link, sendParam).then(function (response) {\n            return response.json();\n          }).then(function (responseJson) {\n            if (responseJson.status) {\n              callback(responseJson.data ? responseJson.data : responseJson);\n            } else {\n              var message = \"\";\n\n              if (responseJson.message != undefined) {\n                message += responseJson.message;\n              }\n\n              if (responseJson.errMsg != undefined) {\n                message += \" \" + responseJson.errMsg;\n              }\n\n              errorCallback(message);\n            }\n          }).catch(function (error) {\n            console.error(error);\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.authAPI = authAPI;\n\nfunction publicAPI(method, path, data, callback, errorCallback) {\n  var link, sendParam;\n  return _regeneratorRuntime.async(function publicAPI$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          link = config.domain + '/' + path;\n          console.log(link);\n          sendParam = {\n            method: method,\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            }\n          };\n\n          if (method == \"POST\") {\n            sendParam.body = JSON.stringify(data);\n          }\n\n          console.log(link);\n          console.log(sendParam);\n          fetch(link, sendParam).then(function (response) {\n            return response.json();\n          }).then(function (responseJson) {\n            if (responseJson.status) {\n              callback(responseJson.data ? responseJson.data : responseJson);\n            } else {\n              var message = \"\";\n\n              if (responseJson.message != undefined) {\n                message += responseJson.message;\n              }\n\n              if (responseJson.errMsg != undefined) {\n                message += \" \" + responseJson.errMsg;\n              }\n\n              errorCallback(message);\n            }\n          }).catch(function (error) {\n            console.error(error);\n          });\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.publicAPI = publicAPI;","map":{"version":3,"sources":["C:/Users/emanu/Downloads/vendor-app-v3.0 (1)/services/api_callers.js"],"names":["config","AsyncStorage","authAPI","method","path","data","callback","errorCallback","getItem","token","link","domain","console","log","sendParam","headers","Accept","body","JSON","stringify","fetch","then","response","json","responseJson","status","message","undefined","errMsg","catch","error","exports","publicAPI"],"mappings":"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","sourcesContent":["import config from '../config';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nasync function authAPI(method,path,data,callback,errorCallback){\n    var token = await AsyncStorage.getItem('token','');\n    var link=config.domain+'/'+path+'?api_token='+token;\n    console.log(link);\n \n    var sendParam={\n        method: method,\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        }\n      };\n    if(method==\"POST\"){\n        sendParam.body=JSON.stringify(data);\n    }\n\n    fetch(link, sendParam).then((response) => response.json()).then((responseJson) => {\n     if(responseJson.status){\n      callback(responseJson.data?responseJson.data:responseJson);\n     }else{\n        var message=\"\";\n        if(responseJson.message!=undefined){\n          message+=responseJson.message;\n        }\n        if(responseJson.errMsg!=undefined){\n          message+=\" \"+responseJson.errMsg;\n        }\n        errorCallback(message);\n     } \n   }).catch(error => {\n     console.error(error);\n   });\n}\nexports.authAPI=authAPI;\n\n\n/**\n * \n * @param {*} method \n * @param {*} path \n * @param {*} data \n * @param {*} callback \n * @param {*} errorCallback \n */\nasync function publicAPI(method,path,data,callback,errorCallback){\n  var link=config.domain+'/'+path;\n  console.log(link);\n\n  var sendParam={\n      method: method,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      }\n    };\n  if(method==\"POST\"){\n      sendParam.body=JSON.stringify(data);\n  }\n  console.log(link);\n  console.log(sendParam);\n  fetch(link, sendParam).then((response) => response.json()).then((responseJson) => {\n   if(responseJson.status){\n    callback(responseJson.data?responseJson.data:responseJson);\n   }else{\n      var message=\"\";\n      if(responseJson.message!=undefined){\n        message+=responseJson.message;\n      }\n      if(responseJson.errMsg!=undefined){\n        message+=\" \"+responseJson.errMsg;\n      }\n      errorCallback(message);\n   } \n }).catch(error => {\n   console.error(error);\n });\n}\nexports.publicAPI=publicAPI;\n"]},"metadata":{},"sourceType":"module"}